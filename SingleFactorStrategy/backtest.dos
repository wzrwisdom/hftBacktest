// step 1：策略编写
// step 2：策略配置与引擎创建
def prepareUserConfig(startDate, endDate){
    userConfig=dict(STRING,ANY)
    userConfig["startDate"]=startDate
    userConfig["endDate"]=endDate
    ///策略类型,暂时固定股票///
    userConfig["strategyGroup"]= "stock"
    ///以指定的频率通过逐笔数据合成快照
    userConfig["frequency"]= 0
    //订单延时
    userConfig["latency"]= 50
    userConfig["cash"]= 100000000
    ///手续费,        
    userConfig["commission"]= 0.0
    //印花税,
    userConfig["tax"]= 0.0
    //行情选择逐笔
    userConfig["dataType"]= 0
    //是否订阅逐笔行情
    userConfig["isSubscribeTickQuotation"]= true
    //是否需要获取委托订单在行情中的位置
    userConfig["isOutputOrderLastQuotationPosition"]= true
    userConfig["enableSubscriptionToTickQuotes"] = true
    ////tick的数据格式，table或dict
    userConfig["msgAsTable"]= false

    return userConfig
}

strategyName="stockCTA"
startDate=2023.09.22
endDate=2023.09.25
userConfig = prepareUserConfig(startDate, endDate)
// step 3：获取数据与执行策略回测
timer engine = runBacktest_tick(userConfig,initialize, beforeTrading,onTick,onSnapshot,onOrder,onTrade,afterTrading,
	finalized,strategyName, startDate, endDate, [`000153.SZ])  ///开始执行回测


// step 4：获取回测结果
  //成交明细
tradeDetails=Backtest::getTradeDetails(engine)
//查询当前的未成交（未完成）订单列表
openOrders=Backtest::getOpenOrders(long(engine))
//每日持仓
dailyPosition=Backtest::getDailyPosition(long(engine))
// 可用资金
enableCash=Backtest::getAvailableCash(long(engine))
//未成交订单明细
openOrders=tradeDetails[tradeDetails.orderStatus==-3]
//日组合指标展示
totalPortfolios=Backtest::getDailyTotalPortfolios(long(engine))
//回测结果综合展示
returnSummary=Backtest::getReturnSummary(long(engine))
//查询逻辑上下文
a=Backtest::getContextDict(long(engine))["trade"].keys()


Backtest::getContextDict(long(engine))["dailyReport"]
